use towashop;



-- spCategory_Delete
DELIMITER $$
CREATE PROCEDURE spCategory_Delete	(IN CID INT)
BEGIN
	DELETE FROM CATEGORIES
	WHERE CATEGORYID = CID;
END $$

-- spCategory_GetAll
DELIMITER $$
CREATE PROCEDURE spCategory_GetAll ()
BEGIN
	SELECT * FROM CATEGORIES ;
END $$

-- spCategory_GetByValue (đã test 'CATEGORY 1 CONTENT')
DELIMITER $$
CREATE PROCEDURE spCategory_GetByValue (IN VALUE NVARCHAR(50))
BEGIN
		SELECT DISTINCT C.* FROM CATEGORIES C
		LEFT JOIN PRODUCT_CATEGORIES PC ON PC.PC_CATEID = C.CATEGORYID
		LEFT JOIN PRODUCTS P ON PC.PC_PID = P.PRODUCTID
	WHERE C.CATEGORYID LIKE VALUE 
	   OR C.CATEGORYNAME LIKE VALUE
	   OR C.C_DESCRIPTION LIKE VALUE
	   OR P.PRODUCTID LIKE VALUE
	   OR P.BARCODE LIKE VALUE
	   OR P.PRODUCTNAME LIKE VALUE;
END $$

-- spCategory_Insert
DELIMITER $$
CREATE PROCEDURE spCategory_Insert (IN CATEGORYNAME NVARCHAR(15), IN C_DESCRIPTION NVARCHAR(60), IN CONTENT NVARCHAR(255))
BEGIN
	INSERT INTO CATEGORIES (CATEGORYNAME,C_DESCRIPTION,CONTENT)
	VALUES (CATEGORYNAME,C_DESCRIPTION,CONTENT);
END $$

-- spCategory_Update
DELIMITER $$
CREATE PROCEDURE spCategory_Update (IN CID INT, IN CATEGORYNAME NVARCHAR(15), IN C_DESCRIPTION NVARCHAR(60), IN CONTENT NVARCHAR(255))
BEGIN
	UPDATE CATEGORIES
	SET 
		CATEGORIES.CATEGORYNAME = CATEGORYNAME,
		CATEGORIES.C_DESCRIPTION = C_DESCRIPTION,
		CATEGORIES.CONTENT = CONTENT
	WHERE CATEGORIES.CATEGORYID = CID;
END $$

-- spProduct_Delete
DELIMITER $$
CREATE PROCEDURE spProduct_Delete (IN PID NVARCHAR (8))
BEGIN
	DELETE FROM PRODUCTS  WHERE PRODUCTID = PID;
END $$

-- spProduct_GetAll
DELIMITER $$
CREATE PROCEDURE spProduct_GetAll ()
BEGIN
	SELECT P.*, PC_CATEID,PS_SLID FROM PRODUCTS P
	LEFT JOIN PRODUCT_SUPPLIERS PS ON P.PRODUCTID = PS.PS_PID
	LEFT JOIN PRODUCT_CATEGORIES PC ON P.PRODUCTID = PC.PC_PID;
END $$

-- spProduct_GetByValue  (ĐÃ test, k rõ tại sao 'QUANTITY OF 2' nó k trả về content của record thứ 2
						-- , ko biết chuyển cái like về mysql ra sao)
DELIMITER $$
CREATE PROCEDURE spProduct_GetByValue  (IN VALUE NVARCHAR(30))
BEGIN
	SELECT DISTINCT P.*, PC.PC_CATEID, PS.PS_SLID FROM PRODUCTS P
	LEFT JOIN PRODUCT_SUPPLIERS PS ON P.PRODUCTID = PS.PS_PID
	LEFT JOIN PRODUCT_CATEGORIES PC ON P.PRODUCTID = PC.PC_PID
			LEFT JOIN SUPPLIERS S ON S.SUPPLIERID = PS.PS_SLID
			LEFT JOIN CATEGORIES C ON C.CATEGORYID = PC.PC_CATEID
			WHERE P.PRODUCTID LIKE VALUE 
			   OR P.BARCODE = VALUE
			   OR P.PRODUCTNAME LIKE VALUE
			   OR P.STATUS LIKE VALUE
			   OR P.CONTENT LIKE VALUE
			   OR P.QUANTITY_PER_UNIT LIKE VALUE
			   OR S.SUPPLIERID  LIKE VALUE
			   OR S.SUPPLIER_NAME LIKE VALUE
			   OR S.CONTACT_NAME  LIKE VALUE
			   OR S.CONTACT_PHONE  LIKE VALUE
			   OR S.CITY LIKE VALUE
			   OR S.COUNTRY LIKE VALUE
			   OR C.CATEGORYNAME LIKE VALUE;
END $$

-- spProduct_Insert
DELIMITER $$
CREATE PROCEDURE spProduct_Insert (
	IN PRODUCTNAME NVARCHAR(40),
	IN BARCODE NVARCHAR(32),
    IN QUANTITY_PER_UNIT  NVARCHAR(20),
    IN UNIT_PRICE  FLOAT,
    IN SALES_PRICE FLOAT,
    IN UNIT_ON_STOCK SMALLINT,
    IN UNIT_ON_ORDER SMALLINT,
    IN VAT FLOAT,
	IN STATUS NVARCHAR(20),
	IN CONTENT NVARCHAR(255),
	IN PC_CATEID INT,
	IN PS_SLID NVARCHAR(8)
)
BEGIN
	-- initialize variables
	DECLARE NEWPID nvarchar(8);
    DECLARE CURRENTPID nvarchar(8);
    DECLARE NEWID INT;
    
	-- set default values
    IF UNIT_PRICE IS NULL THEN SET UNIT_PRICE =  0.0; END IF;
	IF SALES_PRICE IS NULL THEN SET SALES_PRICE = UNIT_PRICE; END IF;
    IF UNIT_ON_STOCK IS NULL THEN SET UNIT_ON_STOCK = 0; END IF;
    IF UNIT_ON_ORDER  IS NULL THEN SET UNIT_ON_ORDER  = 0; END IF;
    IF VAT IS NULL THEN SET VAT = 0; END IF;
    IF PC_CATEID IS NULL THEN SET PC_CATEID = 0; END IF;
    SET NEWPID = 'P0';
    
    -- CHECK TABLE IS CONTAIN ROWS
	IF EXISTS (SELECT 1 FROM PRODUCTS) THEN
		BEGIN
			-- TAKE THE LARGEST VALUE OF ID  AND PLUS ONE IN FORMAT
			SET CURRENTPID = (Select Max(PRODUCTID) from PRODUCTS P);
			SET NEWID = (SELECT Cast(SUBSTRING(CURRENTPID,3,LENGTH(CURRENTPID)) AS UNSIGNED)+1) ;
			SET NEWPID  =  Concat('P',CAST(NEWID as char));
		END;
    END IF;
    
    INSERT INTO PRODUCTS (PRODUCTID,PRODUCTNAME,BARCODE,
							  QUANTITY_PER_UNIT,UNIT_PRICE,SALES_PRICE,
							  UNIT_ON_STOCK,UNIT_ON_ORDER,VAT,STATUS,CONTENT)
					VALUES(NEWPID,PRODUCTNAME,BARCODE,
							  QUANTITY_PER_UNIT,UNIT_PRICE,SALES_PRICE,
							  UNIT_ON_STOCK,UNIT_ON_ORDER,VAT,STATUS,CONTENT);
	INSERT INTO PRODUCT_CATEGORIES VALUES (NEWPID,PC_CATEID);
	INSERT INTO PRODUCT_SUPPLIERS VALUES (NEWPID,PS_SLID);
END $$

-- spProduct_Update
DELIMITER $$
CREATE PROCEDURE spProduct_Update (
	IN PRODUCTID NVARCHAR(8),
	IN PRODUCTNAME NVARCHAR(40),
	IN BARCODE NVARCHAR(32),
    IN QUANTITY_PER_UNIT  NVARCHAR(20),
    IN UNIT_PRICE  FLOAT,
    IN SALES_PRICE FLOAT,
    IN UNIT_ON_STOCK SMALLINT,
    IN UNIT_ON_ORDER SMALLINT,
    IN VAT FLOAT,
	IN STATUS NVARCHAR(20),
	IN CONTENT NVARCHAR(255),
	IN PC_CATEID INT,
	IN PS_SLID NVARCHAR(8)
)
BEGIN
	-- set default values
    IF UNIT_PRICE IS NULL THEN SET UNIT_PRICE =  0.0; END IF;
	IF SALES_PRICE IS NULL THEN SET SALES_PRICE = UNIT_PRICE; END IF;
    IF UNIT_ON_STOCK IS NULL THEN SET UNIT_ON_STOCK = 0; END IF;
    IF UNIT_ON_ORDER  IS NULL THEN SET UNIT_ON_ORDER  = 0; END IF;
    IF VAT IS NULL THEN SET VAT = 0; END IF;
    IF PC_CATEID IS NULL THEN SET PC_CATEID = 0; END IF;

	UPDATE PRODUCTS
		SET 
		    PRODUCTS.PRODUCTNAME =PRODUCTNAME,
		    PRODUCTS.BARCODE =BARCODE,
		    PRODUCTS.QUANTITY_PER_UNIT =QUANTITY_PER_UNIT,
		    PRODUCTS.UNIT_PRICE= UNIT_PRICE  ,
		    PRODUCTS.SALES_PRICE = SALES_PRICE,
			PRODUCTS.UNIT_ON_STOCK =UNIT_ON_STOCK,
			PRODUCTS.UNIT_ON_ORDER= UNIT_ON_ORDER,
			PRODUCTS.VAT=VAT ,
			PRODUCTS.STATUS = STATUS,
			PRODUCTS.CONTENT= CONTENT 
		WHERE PRODUCTS.PRODUCTID = PRODUCTID;
	UPDATE PRODUCT_CATEGORIES
		SET
			PRODUCT_CATEGORIES.PC_CATEID= PC_CATEID 
		WHERE 
			PRODUCT_CATEGORIES.PC_PID = PRODUCTID;
	UPDATE PRODUCT_SUPPLIERS
		SET
			PRODUCT_SUPPLIERS.PS_SLID= PS_SLID 
		WHERE 
			PRODUCT_SUPPLIERS.PS_PID = @PRODUCTID;
END $$

-- spSupplier_Insert
DELIMITER $$
CREATE PROCEDURE spSupplier_Insert (
	IN SUPPLIER_NAME NVARCHAR(30),
	IN CONTACT_NAME NVARCHAR(45),
	IN CONTACT_PHONE NVARCHAR(20),
	IN SL_ADDRESS NVARCHAR(50),
	IN CITY NVARCHAR(20),
	IN COUNTRY NVARCHAR(20),
	IN CONTENT NVARCHAR(255)
)
BEGIN
	-- initialize variables
	DECLARE NEWSLID nvarchar(8);
    DECLARE CURRENTSLID nvarchar(8);
    DECLARE NEWID INT;
    
	-- set default values
    IF NEWSLID IS NULL THEN SET NEWSLID = 'SL1000'; END IF;
    
	-- CHECK TABLE IS CONTAIN ROWS
    IF EXISTS (SELECT 1 FROM SUPPLIERS) THEN
		BEGIN
			-- TAKE THE LARGEST VALUE OF ID  AND PLUS ONE IN FORMAT
			SET CURRENTSLID = (Select Max(SUPPLIERID) from SUPPLIERS S);
			SET NEWID = (SELECT Cast(SUBSTRING(CURRENTSLID,3,LENGTH(CURRENTSLID)) AS UNSIGNED)+1) ;
			SET NEWSLID  =  Concat('SL',CAST(NEWID as char));
		END;
    END IF;
    
    -- Insert statements for procedure here
	INSERT INTO SUPPLIERS (SUPPLIERID,SUPPLIER_NAME, CONTACT_NAME, CONTACT_PHONE, SL_ADDRESS, CITY, COUNTRY , CONTENT)
	VALUES (NEWSLID, SUPPLIER_NAME, CONTACT_NAME, CONTACT_PHONE, SL_ADDRESS, CITY, COUNTRY, CONTENT);
END $$

-- spSupplier_GetAll
DELIMITER $$
CREATE PROCEDURE spSupplier_GetAll ()
BEGIN
	SELECT * FROM SUPPLIERS ;
END $$

-- spSupplier_Update
DELIMITER $$
CREATE PROCEDURE spSupplier_Update (
IN SLID NVARCHAR(15), IN SUPPLIER_NAME NVARCHAR(30), IN CONTACT_NAME NVARCHAR(45), IN CONTACT_PHONE NVARCHAR(20),
IN SL_ADDRESS NVARCHAR(50), IN CITY NVARCHAR(20), IN COUNTRY NVARCHAR(20), IN CONTENT NVARCHAR(255)
)
BEGIN
	UPDATE SUPPLIERS
	SET SUPPLIERS.SUPPLIER_NAME = SUPPLIER_NAME, 
		SUPPLIERS.CONTACT_NAME = CONTACT_NAME,
		SUPPLIERS.CONTACT_PHONE = CONTACT_PHONE,
		SUPPLIERS.SL_ADDRESS= SL_ADDRESS,
		SUPPLIERS.CITY = CITY, 
		SUPPLIERS.COUNTRY = COUNTRY,
		SUPPLIERS.CONTENT = CONTENT
	WHERE SUPPLIERS.SUPPLIERID =SLID;
END $$

-- spSupplier_Delete
DELIMITER $$
CREATE PROCEDURE spSupplier_Delete	(IN SLID nvarchar(15))
BEGIN
	DELETE FROM  SUPPLIERS 
	WHERE SUPPLIERID  = SLID;
END $$

-- spSupplier_GetByValue (test contact phone '12-667-965-0223' chạy được ???)
DELIMITER $$
CREATE PROCEDURE spSupplier_GetByValue (IN SEARCHVALUE nvarchar(50))
BEGIN
	SELECT SL.* FROM SUPPLIERS SL
		LEFT JOIN PRODUCT_SUPPLIERS PS ON SL.SUPPLIERID = PS.PS_SLID
		LEFT JOIN PRODUCTS P ON P.PRODUCTID = PS.PS_SLID
		WHERE SL.SUPPLIER_NAME LIKE SEARCHVALUE 
		   OR SL.SUPPLIERID LIKE  SEARCHVALUE 
		   OR SL.CONTACT_NAME LIKE SEARCHVALUE 
		   OR SL.CONTACT_PHONE LIKE SEARCHVALUE 
		   OR SL.SL_ADDRESS LIKE SEARCHVALUE
		   OR P.PRODUCTID LIKE SEARCHVALUE 
		   OR P.PRODUCTNAME LIKE SEARCHVALUE 
			ORDER BY SL.SUPPLIERID;
END $$

-- spCustomer_Insert
DELIMITER $$
CREATE PROCEDURE spCustomer_Insert (
	IN CID NVARCHAR(11),
	IN FIRST_NAME NVARCHAR(15),
	IN LAST_NAME NVARCHAR(15),
	IN CONTACT_PHONE VARCHAR(20),
	IN SL_ADDRESS NVARCHAR(50),
    IN CITY NVARCHAR(20),
	IN COUNTRY NVARCHAR(20),
	IN CONTENT NVARCHAR(255)
)
BEGIN
	-- initialize variables
	DECLARE NEWCTID nvarchar(8);
    DECLARE CURRENTCTID nvarchar(8);
    DECLARE NEWID INT;
    
	-- set default values
    IF NEWCTID IS NULL THEN SET NEWCTID = 'CT1000'; END IF;
    
	-- CHECK TABLE IS CONTAIN ROWS
    IF EXISTS (SELECT 1 FROM CUSTOMERS) THEN
		BEGIN
			-- TAKE THE LARGEST VALUE OF ID  AND PLUS ONE IN FORMAT
			SET CURRENTCTID = (Select Max(CUSTOMERID) from CUSTOMERS CT);
			SET NEWID = (SELECT Cast(SUBSTRING(CURRENTCTID,3,LENGTH(CURRENTCTID)) AS UNSIGNED)+1) ;
			SET NEWCTID  =  Concat('CT',CAST(NEWID as char));
		END;
    END IF;
    
    -- Insert statements for procedure here
	INSERT INTO CUSTOMERS (CUSTOMERID, CID, FIRST_NAME, LAST_NAME, CONTACT_PHONE, SL_ADDRESS, CITY, COUNTRY , CONTENT)
	VALUES (NEWCTID, CID, FIRST_NAME, LAST_NAME, CONTACT_PHONE, SL_ADDRESS, CITY, COUNTRY, CONTENT);
END $$

-- spCustomer_GetAll
DELIMITER $$
CREATE PROCEDURE spCustomer_GetAll ()
BEGIN
	SELECT * FROM CUSTOMERS ;
END $$

-- spCustomer_Update
DELIMITER $$
CREATE PROCEDURE spCustomer_Update (
IN CTID NVARCHAR(8), IN CID NVARCHAR(11), IN FIRST_NAME NVARCHAR(15),
IN LAST_NAME NVARCHAR(15), IN CONTACT_PHONE NVARCHAR(20), IN SL_ADDRESS NVARCHAR(50),
IN CITY NVARCHAR(20), IN COUNTRY NVARCHAR(20), IN CONTENT NVARCHAR(255)
)
BEGIN
	UPDATE CUSTOMERS
	SET CUSTOMERS.CID = CID, 
		CUSTOMERS.FIRST_NAME = FIRST_NAME,
        CUSTOMERS.LAST_NAME = LAST_NAME,
		CUSTOMERS.CONTACT_PHONE = CONTACT_PHONE,
		CUSTOMERS.SL_ADDRESS= SL_ADDRESS,
		CUSTOMERS.CITY = CITY, 
		CUSTOMERS.COUNTRY = COUNTRY,
		CUSTOMERS.CONTENT = CONTENT
	WHERE CUSTOMERS.CUSTOMERID =CTID;
END $$

-- spCustomer_Delete
DELIMITER $$
CREATE PROCEDURE spCustomer_Delete	(IN CTID nvarchar(15))
BEGIN
	DELETE FROM  CUSTOMERS 
	WHERE CUSTOMERID  = CTID;
END $$

-- spCustomer_GetByValue
DELIMITER $$
CREATE PROCEDURE spCustomer_GetByValue (IN SEARCHVALUE nvarchar(50))
BEGIN
	SELECT CT.* FROM CUSTOMERS CT
		LEFT JOIN CUSTOMER_ORDERS CO ON CT.CUSTOMERID = CO.CO_CTID
		LEFT JOIN ORDERS O ON O.ORDERID = CO.CO_OID
		WHERE CT.CID LIKE SEARCHVALUE 
		   OR CT.CUSTOMERID LIKE  SEARCHVALUE 
           OR CT.FIRST_NAME LIKE  SEARCHVALUE 
		   OR CT.LAST_NAME LIKE SEARCHVALUE 
		   OR CT.CONTACT_PHONE LIKE SEARCHVALUE 
		   OR CT.SL_ADDRESS LIKE SEARCHVALUE
           OR CO.CO_ID LIKE SEARCHVALUE
		   OR O.ORDERID LIKE SEARCHVALUE 
		   OR O.CREATED_AT LIKE SEARCHVALUE 
			ORDER BY CT.CUSTOMERID;
END $$
